// Edit your app's name below 
def APP_NAME = 'esbdrs-x-proxy'

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = APP_NAME

//EDIT LINE BELOW (Change `IMAGESTREAM_NAME` so it matches the name of your *output*/deployable image stream.) 
def IMAGESTREAM_NAME = APP_NAME

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

node {
  stage("Build ${BUILD_CONFIG}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Building ${BUILD_CONFIG} ..."
          def build = openshift.selector("bc", "${BUILD_CONFIG}")
          build.startBuild().logs("-f")
        }
      }
    }
  }

  stage("Deploy ${TAG_NAMES[0]}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Tagging ${IMAGESTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."

          // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
          // Tag the images for deployment based on the image's hash
          def IMAGE_HASH = getImageTagHash("${IMAGESTREAM_NAME}")
          echo "IMAGE_HASH: ${IMAGE_HASH}"
          openshift.tag("${IMAGESTREAM_NAME}@${IMAGE_HASH}", "${IMAGESTREAM_NAME}:${TAG_NAMES[0]}")
        }
      }
    }
  }
}
